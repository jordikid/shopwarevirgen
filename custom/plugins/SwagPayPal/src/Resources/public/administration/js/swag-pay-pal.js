(this.webpackJsonp=this.webpackJsonp||[]).push([["swag-pay-pal"],{"/SYc":function(e,t,n){"use strict";n.r(t);n("9jKl");var a=n("bdLW"),s=n.n(a);n("RyCx");const{Component:i,Mixin:l}=Shopware;i.override("sw-first-run-wizard-paypal-credentials",{template:s.a,inject:["systemConfigApiService"],mixins:[l.getByName("notification"),l.getByName("swag-paypal-credentials-loader")],data:()=>({config:{},isLoading:!1}),computed:{sandboxMode(){return this.config["SwagPayPal.settings.sandbox"]||!1},onboardingUrl(){return this.sandboxMode?this.onboardingUrlSandbox:this.onboardingUrlLive},onboardingCallback(){return this.sandboxMode?"onboardingCallbackSandbox":"onboardingCallbackLive"},buttonConfig(){return this.$super("buttonConfig").reduce((e,t)=>("next"===t.key&&(t.action=this.onClickNext.bind(this)),[...e,t]),[])}},created(){this.createdComponent()},methods:{createdComponent(){this.$super("createdComponent"),this.fetchPayPalConfig()},onPayPalCredentialsLoadSuccess(e,t,n){this.setConfig(e,t,n)},onPayPalCredentialsLoadFailed(e){this.setConfig("","",e),this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleFetchedError"),message:this.$tc("swag-paypal-frw-credentials.messageFetchedError"),duration:1e4})},setConfig(e,t,n){n?(this.$set(this.config,"SwagPayPal.settings.clientIdSandbox",e),this.$set(this.config,"SwagPayPal.settings.clientSecretSandbox",t)):(this.$set(this.config,"SwagPayPal.settings.clientId",e),this.$set(this.config,"SwagPayPal.settings.clientSecret",t))},onClickNext(){return(this.config["SwagPayPal.settings.sandbox"]||this.config["SwagPayPal.settings.clientId"]&&this.config["SwagPayPal.settings.clientSecret"])&&(!this.config["SwagPayPal.settings.sandbox"]||this.config["SwagPayPal.settings.clientIdSandbox"]&&this.config["SwagPayPal.settings.clientSecretSandbox"])?this.isGetCredentialsSuccessful?this.saveConfig().then(()=>(this.$emit("frw-redirect","sw.first.run.wizard.index.plugins"),Promise.resolve(!1))).catch(()=>Promise.resolve(!0)):this.testApiCredentials().then(e=>"success"===e?this.saveConfig().then(()=>(this.$emit("frw-redirect","sw.first.run.wizard.index.plugins"),Promise.resolve(!1))).catch(()=>Promise.resolve(!0)):Promise.resolve(!0)):(this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleNoCredentials"),message:this.$tc("swag-paypal-frw-credentials.messageNoCredentials")}),Promise.resolve(!0))},fetchPayPalConfig(){return this.isLoading=!0,this.systemConfigApiService.getValues("SwagPayPal.settings",null).then(e=>{this.config=e}).finally(()=>{this.isLoading=!1})},saveConfig(){return this.isLoading=!0,this.systemConfigApiService.saveValues(this.config,null).then(()=>{this.isLoading=!1})},testApiCredentials(){this.isLoading=!0;const e=this.config["SwagPayPal.settings.sandbox"]?this.config["SwagPayPal.settings.clientIdSandbox"]:this.config["SwagPayPal.settings.clientId"],t=this.config["SwagPayPal.settings.sandbox"]?this.config["SwagPayPal.settings.clientSecretSandbox"]:this.config["SwagPayPal.settings.clientSecret"];return this.SwagPayPalApiCredentialsService.validateApiCredentials(e,t,this.config["SwagPayPal.settings.sandbox"]).then(e=>{return e.credentialsValid?(this.isLoading=!1,"success"):"error"}).catch(e=>{if(e.response.data&&e.response.data.errors){let t="<ul>";e.response.data.errors.forEach(e=>{t=`${t}<li>${e.detail}</li>`}),t+="</ul>",this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleTestError"),message:t}),this.isLoading=!1}return"error"})},onCredentialsChanged(){this.isGetCredentialsSuccessful=null}}});var r=n("jIlG"),o=n.n(r);n("lpkt");var c={MERCHANT_LOCATION_GERMANY:"germany",MERCHANT_LOCATION_OTHER:"other",WEBHOOK_RESULT_CREATED:"created",WEBHOOK_RESULT_NOTHING:"nothing",WEBHOOK_RESULT_UPDATED:"updated"};const{Mixin:d}=Shopware;Shopware.Component.register("swag-paypal",{template:o.a,inject:["SwagPayPalWebhookRegisterService","SwagPayPalApiCredentialsService"],mixins:[d.getByName("notification")],data:()=>({isLoading:!1,isSaveSuccessful:!1,isTestSuccessful:!1,isTestSandboxSuccessful:!1,clientIdFilled:!1,clientSecretFilled:!1,clientIdSandboxFilled:!1,clientSecretSandboxFilled:!1,sandboxChecked:!1,config:null,clientIdErrorState:null,clientSecretErrorState:null,clientIdSandboxErrorState:null,clientSecretSandboxErrorState:null,...c}),metaInfo(){return{title:this.$createTitle()}},computed:{showSPBCard(){return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_OTHER},showPlusCard(){return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_GERMANY}},watch:{config:{handler(){const e=this.$refs.configComponent.allConfigs.null;null===this.$refs.configComponent.selectedSalesChannelId?(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]):(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"]||!!e["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"]||!!e["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"]||!!e["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"]||!!e["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]||!!e["SwagPayPal.settings.sandbox"])},deep:!0}},methods:{onSave(){(this.sandboxChecked||this.clientIdFilled&&this.clientSecretFilled)&&(!this.sandboxChecked||this.clientIdSandboxFilled&&this.clientSecretSandboxFilled)?this.save():this.setErrorStates()},save(){this.isLoading=!0,this.$refs.configComponent.save().then(e=>{this.isLoading=!1,this.isSaveSuccessful=!0,e&&(this.config=e),this.registerWebhook()}).catch(()=>{this.isLoading=!1})},registerWebhook(){this.SwagPayPalWebhookRegisterService.registerWebhook(this.$refs.configComponent.selectedSalesChannelId).then(e=>{const t=e.result;t!==this.WEBHOOK_RESULT_NOTHING&&(t!==this.WEBHOOK_RESULT_CREATED?(t===this.WEBHOOK_RESULT_UPDATED&&this.createNotificationSuccess({title:this.$tc("swag-paypal.settingForm.titleSuccess"),message:this.$tc("swag-paypal.settingForm.messageWebhookUpdated")}),this.isLoading=!1):this.createNotificationSuccess({title:this.$tc("swag-paypal.settingForm.titleSuccess"),message:this.$tc("swag-paypal.settingForm.messageWebhookCreated")}))}).catch(e=>{if(e.response.data&&e.response.data.errors){let t=`${this.$tc("swag-paypal.settingForm.messageWebhookError")}<br><br><ul>`;e.response.data.errors.forEach(e=>{t=`${t}<li>${e.detail}</li>`}),t+="</li>",this.createNotificationError({title:this.$tc("swag-paypal.settingForm.titleError"),message:t})}this.isLoading=!1})},setErrorStates(){const e={code:1,detail:this.$tc("swag-paypal.messageNotBlank")};this.sandboxChecked?(this.clientIdSandboxErrorState=null,this.clientSecretSandboxErrorState=null,this.clientIdSandboxFilled||(this.clientIdSandboxErrorState=e),this.clientSecretSandboxFilled||(this.clientSecretSandboxErrorState=e)):(this.clientIdErrorState=null,this.clientSecretErrorState=null,this.clientIdFilled||(this.clientIdErrorState=e),this.clientSecretFilled||(this.clientSecretErrorState=e))}}});var p=n("XobP"),u=n.n(p);const{Component:g}=Shopware;g.override("sw-settings-index",{template:u.a});var h=n("w9bD"),m=n.n(h);const{Component:b}=Shopware;b.register("sw-paypal-behaviour",{template:m.a,name:"SwagPaypalBehaviour",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},data:()=>({...c}),computed:{intentOptions(){return[{id:"sale",name:this.$tc("swag-paypal.settingForm.behaviour.intent.sale")},{id:"authorize",name:this.$tc("swag-paypal.settingForm.behaviour.intent.authorize")},{id:"order",name:this.$tc("swag-paypal.settingForm.behaviour.intent.order")}]},merchantLocationOptions(){return[{id:this.MERCHANT_LOCATION_GERMANY,name:this.$tc("swag-paypal.settingForm.behaviour.merchantLocation.germany")},{id:this.MERCHANT_LOCATION_OTHER,name:this.$tc("swag-paypal.settingForm.behaviour.merchantLocation.other")}]},landingPageOptions(){return[{id:"Login",name:this.$tc("swag-paypal.settingForm.behaviour.landingPage.options.Login")},{id:"Billing",name:this.$tc("swag-paypal.settingForm.behaviour.landingPage.options.Billing")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var w=n("Qpcm"),y=n.n(w);const{Component:_,Mixin:f}=Shopware;_.register("sw-paypal-credentials",{template:y.a,name:"SwagPaypalCredentials",mixins:[f.getByName("notification"),f.getByName("swag-paypal-credentials-loader")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},clientIdErrorState:{required:!0},clientSecretErrorState:{required:!0},clientIdSandboxErrorState:{required:!0},clientSecretSandboxErrorState:{required:!0},clientIdFilled:{type:Boolean,required:!0},clientSecretFilled:{type:Boolean,required:!0},clientIdSandboxFilled:{type:Boolean,required:!0},clientSecretSandboxFilled:{type:Boolean,required:!0},isLoading:{type:Boolean,required:!0}},data:()=>({isTestingLive:!1,isTestingSandbox:!1,isTestLiveSuccessful:!1,isTestSandboxSuccessful:!1}),computed:{testLiveButtonDisabled(){return this.isLoading||!this.clientSecretFilled||!this.clientIdFilled||this.isTestingLive},testSandboxButtonDisabled(){return this.isLoading||!this.clientSecretSandboxFilled||!this.clientIdSandboxFilled||this.isTestingSandbox}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e,onTest(e){let t,n;e?this.isTestingSandbox=!0:this.isTestingLive=!0,e?(t=this.actualConfigData["SwagPayPal.settings.clientIdSandbox"]||this.allConfigs.null["SwagPayPal.settings.clientIdSandbox"],n=this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]||this.allConfigs.null["SwagPayPal.settings.clientSecretSandbox"]):(t=this.actualConfigData["SwagPayPal.settings.clientId"]||this.allConfigs.null["SwagPayPal.settings.clientId"],n=this.actualConfigData["SwagPayPal.settings.clientSecret"]||this.allConfigs.null["SwagPayPal.settings.clientSecret"]),this.SwagPayPalApiCredentialsService.validateApiCredentials(t,n,e).then(t=>{t.credentialsValid&&(e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!0):(this.isTestingLive=!1,this.isTestLiveSuccessful=!0))}).catch(t=>{if(t.response.data&&t.response.data.errors){let n=`${this.$tc("swag-paypal.settingForm.messageTestError")}<br><br><ul>`;t.response.data.errors.forEach(e=>{n=`${n}<li>${e.detail}</li>`}),n+="</li>",this.createNotificationError({title:this.$tc("swag-paypal.settingForm.titleError"),message:n}),e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!1):(this.isTestingLive=!1,this.isTestLiveSuccessful=!1)}})},onPayPalCredentialsLoadSuccess(e,t,n){n?(this.$set(this.actualConfigData,"SwagPayPal.settings.clientIdSandbox",e),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecretSandbox",t)):(this.$set(this.actualConfigData,"SwagPayPal.settings.clientId",e),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecret",t))},onPayPalCredentialsLoadFailed(e){e?(this.$set(this.actualConfigData,"SwagPayPal.settings.clientIdSandbox",""),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecretSandbox","")):(this.$set(this.actualConfigData,"SwagPayPal.settings.clientId",""),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecret","")),this.createNotificationError({title:this.$tc("swag-paypal.settingForm.credentials.button.titleFetchedError"),message:this.$tc("swag-paypal.settingForm.credentials.button.messageFetchedError"),duration:1e4})}}});var S=n("WW0I"),P=n.n(S);const{Component:C}=Shopware;C.register("sw-paypal-express",{template:P.a,name:"SwagPaypalExpress",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var x=n("myYF"),k=n.n(x);const{Component:v}=Shopware;v.register("sw-paypal-installment",{template:k.a,name:"SwagPaypalInstallment",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var I=n("W4Ye"),T=n.n(I);const{Component:$}=Shopware;$.register("sw-paypal-plus",{template:T.a,name:"SwagPaypalPlus",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var F=n("agWB"),E=n.n(F);const{Component:A}=Shopware;A.register("sw-paypal-spb",{template:E.a,name:"SwagPaypalSpb",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var L=n("I6iY"),D=n("3nUz");const{Module:B}=Shopware;B.register("swag-paypal",{type:"plugin",name:"SwagPayPal",title:"swag-paypal.general.mainMenuItemGeneral",description:"swag-paypal.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",snippets:{"de-DE":L,"en-GB":D},routes:{index:{component:"swag-paypal",path:"index",meta:{parentPath:"sw.settings.index"}}}});var R=n("Ivxe"),z=n.n(R);const{Component:V,Context:N}=Shopware,O=Shopware.Data.Criteria;V.override("sw-order-detail",{template:z.a,data:()=>({isPayPalPayment:!1}),computed:{isEditable(){return!this.isPayPalPayment||"swag.paypal.payment.detail"!==this.$route.name},showTabs:()=>!0},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return void this.setIsPayPalPayment(null);const e=this.repositoryFactory.create("order"),t=new O(1,1);t.addAssociation("transactions"),e.get(this.orderId,N.api,t).then(e=>{if(e.transactions.length<=0||!e.transactions[0].paymentMethodId)return void this.setIsPayPalPayment(null);const t=e.transactions[0].paymentMethodId;null!=t&&this.setIsPayPalPayment(t)})},immediate:!0}},methods:{setIsPayPalPayment(e){if(!e)return;this.repositoryFactory.create("payment_method").get(e,N.api).then(e=>{this.isPayPalPayment="handler_swag_paypalpaymenthandler"===e.formattedHandlerIdentifier||"handler_swag_paypalpuipaymenthandler"===e.formattedHandlerIdentifier})}}});var M=n("8RPk"),W=n.n(M);const{Component:U}=Shopware;U.override("sw-plugin-list",{template:W.a});var H=n("NFFz"),Z=n.n(H),q=(n("fezf"),n("du1X")),j=n.n(q);const{Component:G,Mixin:Y}=Shopware,K=Shopware.Utils;G.register("swag-paypal-payment-action-capture",{template:j.a,inject:["SwagPayPalPaymentService"],mixins:[Y.getByName("notification")],props:{paymentResource:{type:Object,required:!0},maxCaptureValue:{type:Number,required:!0},orderId:{type:String,required:!0}},data(){return{isFinalCapture:!0,captureValue:this.maxCaptureValue,isLoading:!0,currency:this.paymentResource.transactions[0].amount.currency}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},capture(){const e=this.captureValue,t=this.currency,n=this.isFinalCapture,a=this.paymentResource.intent,s=this.getResourceId(this.paymentResource);this.isLoading=!0,this.SwagPayPalPaymentService.capturePayment(this.orderId,a,s,e,t,n).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.captureAction.successTitle"),message:this.$tc("swag-paypal-payment.captureAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${K.createId()}`)})}).catch(e=>{this.createNotificationError({title:e.title,message:e.message}),this.isLoading=!1})},getResourceId(e){const t=e.transactions[0].related_resources[0];return t.authorization?t.authorization.id:t.order.id}}});var J=n("jwJ0"),Q=n.n(J);const{Component:X,Mixin:ee,Filter:te}=Shopware,ne=Shopware.Utils;X.register("swag-paypal-payment-action-refund",{template:Q.a,inject:["SwagPayPalPaymentService"],mixins:[ee.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({captures:[],selectedCapture:{},refundAmount:0,refundableAmount:0,refundDescription:"",refundReason:"",refundInvoiceNumber:"",isLoading:!0,selectedCaptureId:""}),computed:{dateFilter:()=>te.getByName("date")},created(){this.createdComponent()},methods:{createdComponent(){this.getRefundableCaptures(),this.selectedCaptureId=this.captures[0].id,this.isLoading=!1,this.preserveCapture(),this.refundAmount=Number(this.captures[0].refundableAmount)},getRefundableCaptures(){const e=this.paymentResource.transactions[0].related_resources;this.captures=e.reduce((e,t)=>{if(t.sale){const n=t.sale;"refunded"!==n.state&&e.push(this.formatCapture(n,"sale"))}if(t.capture){const n=t.capture;"refunded"!==n.state&&"partially_refunded"!==n.state&&e.push(this.formatCapture(n,"capture"))}return e},this.captures)},formatCapture(e,t){return{label:`${this.dateFilter(e.create_time)} (${e.amount.total} ${e.amount.currency})`+` - ${e.id} [${e.state}]`,id:e.id,refundableAmount:e.amount.total,currency:e.amount.currency,type:t}},preserveCapture(){const e=this.captures.find(e=>e.id===this.selectedCaptureId);this.selectedCapture=e,this.refundableAmount=Number(e.refundableAmount),this.refundAmount=Number(e.refundableAmount)},refund(){this.isLoading=!0;const e=this.refundAmount,t=this.refundDescription,n=this.selectedCapture.currency,a=this.selectedCapture.type,s=this.selectedCapture.id,i=this.refundReason,l=this.refundInvoiceNumber;this.SwagPayPalPaymentService.refundPayment(this.orderId,a,s,e,n,t,i,l).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.refundAction.successTitle"),message:this.$tc("swag-paypal-payment.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${ne.createId()}`)})}).catch(e=>{this.createNotificationError({title:e.title,message:e.message,autoClose:!1}),this.isLoading=!1})}}});var ae=n("cCEk"),se=n.n(ae);const{Component:ie,Mixin:le}=Shopware,re=Shopware.Utils;ie.register("swag-paypal-payment-action-void",{template:se.a,inject:["SwagPayPalPaymentService"],mixins:[le.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({isLoading:!1}),methods:{voidPayment(){this.isLoading=!0;const e=this.paymentResource.intent,t=this.getResourceId(),n=this.$route.params.id;this.SwagPayPalPaymentService.voidPayment(this.orderId,e,t,n).then(()=>{this.createNotificationSuccess({title:this.$tc("swag-paypal-payment.voidAction.successTitle"),message:this.$tc("swag-paypal-payment.voidAction.successMessage")}),this.isLoading=!1,this.closeModal(),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${re.createId()}`)})}).catch(e=>{this.createNotificationError({title:e.title,message:e.message}),this.isLoading=!1})},getResourceId(){const e=this.paymentResource.transactions[0].related_resources[0];return e.order?e.order.id:e.authorization.id},closeModal(){this.$emit("modal-close")}}});const{Component:oe}=Shopware;oe.register("swag-paypal-payment-actions",{template:Z.a,props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({modalType:"",refundableAmount:0,captureableAmount:0,showVoidButton:!1}),created(){this.createdComponent()},methods:{createdComponent(){this.setPaymentActionAmounts(),this.setShowVoidButton(),this.captureableAmount=this.formatAmount(this.captureableAmount),this.refundableAmount=this.formatAmount(this.refundableAmount)},spawnModal(e){this.modalType=e},closeModal(){this.modalType=""},setPaymentActionAmounts(){this.paymentResource.transactions[0].related_resources.forEach(e=>{if(e.authorization&&(this.captureableAmount=e.authorization.amount.total),e.order&&(this.captureableAmount=e.order.amount.total),e.sale&&"refunded"!==e.sale.state&&(this.refundableAmount=e.sale.amount.total),e.capture){const t=e.capture.amount.total;this.captureableAmount-=t,"refunded"!==e.capture.state&&"partially_refunded"!==e.capture.state&&(this.refundableAmount+=t)}})},setShowVoidButton(){const e=this.paymentResource.transactions[0].related_resources[0];if(!e)return;const t=["voided","captured","completed"];if(!e.sale){if(e.order){const n=e.order;if(t.includes(n.state))return void(this.captureableAmount=0);this.showVoidButton=!0}if(e.authorization){const n=e.authorization;if(t.includes(n.state))return void(this.captureableAmount=0);this.showVoidButton=!0}}},formatAmount:e=>Number(`${Math.round(`${e}e2`)}e-2`)}});var ce=n("amGt"),de=n.n(ce);n("Hb81");const{Component:pe,Mixin:ue,Filter:ge,Context:he}=Shopware,me=Shopware.Data.Criteria;pe.register("swag-paypal-payment-detail",{template:de.a,inject:["SwagPayPalPaymentService","repositoryFactory"],mixins:[ue.getByName("notification")],data:()=>({paymentResource:{},relatedResources:[],isLoading:!0,createDateTime:"",updateDateTime:"",currency:"",amount:{}}),computed:{dateFilter:()=>ge.getByName("date"),relatedResourceColumns(){return[{property:"type",label:this.$tc("swag-paypal-payment.transactionHistory.types.type"),rawData:!0},{property:"total",label:this.$tc("swag-paypal-payment.transactionHistory.types.amount"),rawData:!0},{property:"id",label:this.$tc("swag-paypal-payment.transactionHistory.types.trackingId"),rawData:!0},{property:"status",label:this.$tc("swag-paypal-payment.transactionHistory.types.state"),rawData:!0},{property:"transactionFee",label:this.$tc("swag-paypal-payment.transactionHistory.types.transactionFee"),rawData:!0},{property:"paymentMode",label:this.$tc("swag-paypal-payment.transactionHistory.types.paymentMode"),rawData:!0},{property:"create",label:this.$tc("swag-paypal-payment.transactionHistory.types.createTime"),rawData:!0},{property:"update",label:this.$tc("swag-paypal-payment.transactionHistory.types.updateTime"),rawData:!0}]}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){const e=this.$route.params.id,t=this.repositoryFactory.create("order"),n=new me(1,1);n.addAssociation("transactions"),t.get(e,he.api,n).then(e=>{this.order=e;const t=e.transactions[0].customFields.swag_paypal_transaction_id;this.SwagPayPalPaymentService.getPaymentDetails(this.order.id,t).then(e=>{this.paymentResource=e,this.setRelatedResources(),this.createDateTime=this.formatDate(this.paymentResource.create_time),this.updateDateTime=this.formatDate(this.paymentResource.update_time),this.currency=this.paymentResource.transactions[0].amount.currency,this.amount=this.paymentResource.transactions[0].amount,this.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("swag-paypal-payment.paymentDetails.error.title"),message:e.message,autoClose:!1}),this.isLoading=!1})})},formatDate(e){return this.dateFilter(e,{hour:"2-digit",minute:"2-digit",second:"2-digit"})},setRelatedResources(){this.paymentResource.transactions[0].related_resources.forEach(e=>{e.sale&&this.pushRelatedResource("sale",e.sale),e.authorization&&this.pushRelatedResource("authorization",e.authorization),e.order&&this.pushRelatedResource("order",e.order),e.refund&&this.pushRelatedResource("refund",e.refund),e.capture&&this.pushRelatedResource("capture",e.capture)})},pushRelatedResource(e,t){let n=null;const a=t.amount.currency;t.transaction_fee&&(n=`${t.transaction_fee.value} ${a}`),this.relatedResources.push({id:t.id,type:this.$tc(`swag-paypal-payment.transactionHistory.states.${e}`),total:`${t.amount.total} ${a}`,create:this.formatDate(t.create_time),update:this.formatDate(t.update_time),transactionFee:n,status:t.state,paymentMode:t.payment_mode})},resetDataAttributes(){this.paymentResource={},this.relatedResources=[],this.isLoading=!0,this.createDateTime="",this.updateDateTime="",this.currency="",this.amount={}}}});var be=n("37ny"),we=n("1+5t");const{Module:ye}=Shopware;ye.register("swag-paypal-payment",{type:"plugin",name:"SwagPayPal",title:"swag-paypal-payment.general.title",description:"swag-paypal-payment.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#2b52ff",snippets:{"de-DE":be,"en-GB":we},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"swag-paypal-payment-detail",name:"swag.paypal.payment.detail",isChildren:!0,path:"/sw/order/paypal/detail/:id"}),e(t)}});const _e=Shopware.Classes.ApiService;var fe=class extends _e{constructor(e,t,n="paypal"){super(e,t,n)}registerWebhook(e){const t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/webhook/register/${e}`,{},{headers:t}).then(e=>_e.handleResponse(e))}};const Se=Shopware.Classes.ApiService;var Pe=class extends Se{constructor(e,t,n="paypal"){super(e,t,n)}validateApiCredentials(e,t,n){const a=this.getBasicHeaders();return this.httpClient.get(`_action/${this.getApiBasePath()}/validate-api-credentials`,{params:{clientId:e,clientSecret:t,sandboxActive:n},headers:a}).then(e=>Se.handleResponse(e))}getApiCredentials(e,t,n,a,s={},i={}){const l=s,r=this.getBasicHeaders(i);return this.httpClient.post(`_action/${this.getApiBasePath()}/get-api-credentials`,{authCode:e,sharedId:t,nonce:n,sandboxActive:a},{params:l,headers:r}).then(e=>Se.handleResponse(e))}};const Ce=Shopware.Classes.ApiService;var xe=class extends Ce{constructor(e,t,n="paypal"){super(e,t,n)}getPaymentDetails(e,t){const n=`${this.getApiBasePath()}/payment-details/${e}/${t}`;return this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(e=>Ce.handleResponse(e))}capturePayment(e,t,n,a,s,i){const l=`_action/${this.getApiBasePath()}/capture-payment/${t}/${n}/${e}`;return this.httpClient.post(l,{captureAmount:a,currency:s,captureIsFinal:i},{headers:this.getBasicHeaders()}).then(e=>Ce.handleResponse(e))}refundPayment(e,t,n,a,s,i,l,r){const o=`_action/${this.getApiBasePath()}/refund-payment/${t}/${n}/${e}`;return this.httpClient.post(o,{refundAmount:a,currency:s,description:i,reason:l,refundInvoiceNumber:r},{headers:this.getBasicHeaders()}).then(e=>Ce.handleResponse(e))}voidPayment(e,t,n){const a=`_action/${this.getApiBasePath()}/void-payment/${t}/${n}/${e}`;return this.httpClient.post(a,{},{headers:this.getBasicHeaders()}).then(e=>Ce.handleResponse(e))}};const{Application:ke}=Shopware;ke.addServiceProvider("SwagPayPalWebhookRegisterService",e=>{const t=ke.getContainer("init");return new fe(t.httpClient,e.loginService)}),ke.addServiceProvider("SwagPayPalApiCredentialsService",e=>{const t=ke.getContainer("init");return new Pe(t.httpClient,e.loginService)}),ke.addServiceProvider("SwagPayPalPaymentService",e=>{const t=ke.getContainer("init");return new xe(t.httpClient,e.loginService)});var ve=n("ipas"),Ie=n("sBE9");Shopware.Locale.extend("de-DE",ve),Shopware.Locale.extend("en-GB",Ie)},"1+5t":function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Orders"},"tabs":{"overview":"Overview"},"paymentDetails":{"cardTitle":"Payment","invoice":{"heading":"Invoice amount","totalAmount":"Total amount:","subTotal":"Subtotal:","shipping":"Shipping:"},"payment":{"heading":"Payment details","intent":"Intent:","paymentId":"Payment ID:","cartId":"Cart ID:","state":"State:","createTime":"Create time:","updateTime":"Update time:"},"customer":{"heading":"Customer","payerId":"Payer ID:"},"error":{"title":"Error fetching payment details from PayPal"}},"transactionHistory":{"cardTitle":"Payment History","states":{"authorization":"Authorization","sale":"Sale","refund":"Refund","capture":"Capture","order":"Order"},"types":{"type":"Type","amount":"Amount","createTime":"Created","updateTime":"Updated","state":"State","trackingId":"Tracking ID","transactionFee":"Transaction fee","paymentMode":"Payment mode"}},"buttons":{"label":{"refund":"Create a new refund","capture":"Authorize","void":"Cancel authorization"}},"modal":{"title":{"refund":"New refund","capture":"Authorize","void":"Cancel authorization"}},"refundAction":{"successTitle":"Success","successMessage":"Your refund was successful.","invoiceSelect":{"label":"Select capture"},"refundAmount":{"label":"Amount","placeholder":"Enter a amount"},"refundDescription":{"label":"Description","placeholder":"Enter a description"},"refundReason":{"label":"Reason","placeholder":"Enter a reason"},"refundInvoiceNumber":{"label":"Invoice number","placeholder":"Enter an invoice number"},"confirmButton":{"text":"Execute"}},"captureAction":{"successTitle":"Success","successMessage":"Your capture was successful.","maxAmount":"Maximum amount","currentAmount":"Amount","isFinal":"This is final capture","button":{"text":"Capture payment"}},"voidAction":{"successTitle":"Success","successMessage":"The payment was successfully voided.","confirm":{"message":"Do you really want to cancel this payment?","button":{"confirm":"Cancel authorization","cancel":"No"}}}}}')},"23zC":function(e,t,n){},"37ny":function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Bestellungen"},"tabs":{"overview":"Übersicht"},"paymentDetails":{"cardTitle":"Zahlung","invoice":{"heading":"Rechnungsbetrag","totalAmount":"Gesamtbetrag:","subTotal":"Zwischensumme:","shipping":"Versandkosten:"},"payment":{"heading":"Zahlungsdetails","intent":"Zahlungsabschluss:","paymentId":"Zahlungs-ID:","cartId":"Warenkorb-ID:","state":"Status:","createTime":"Erstellt:","updateTime":"Zul. aktualisiert:"},"customer":{"heading":"Kunde","payerId":"Kunden-ID:"},"error":{"title":"Fehler beim Abrufen der Zahlungsdaten von PayPal"}},"transactionHistory":{"cardTitle":"Zahlungsverlauf","states":{"authorization":"Autorisierung","sale":"Verkauf","refund":"Rückerstattung","capture":"Einzug","order":"Bestellung"},"types":{"type":"Typ","amount":"Betrag","createTime":"Erstellt","updateTime":"Aktualisiert","state":"Status","trackingId":"Tracking-ID","transactionFee":"Aufschlag","paymentMode":"Zahlungsmodus"}},"buttons":{"label":{"refund":"Rückerstattung","capture":"Autorisieren","void":"Autorisierung abbrechen"}},"modal":{"title":{"refund":"Rückerstattung","capture":"Zahlung einziehen","void":"Autorisierung abbrechen"}},"refundAction":{"successTitle":"Erfolg","successMessage":"Die Rückerstattung war erfolgreich.","invoiceSelect":{"label":"Einzug wählen"},"refundAmount":{"label":"Betrag","placeholder":"Betrag angeben"},"refundDescription":{"label":"Beschreibung","placeholder":"Beschreibung eintragen"},"refundReason":{"label":"Begründung","placeholder":"Begründung eintragen"},"refundInvoiceNumber":{"label":"Rechnungsnummer","placeholder":"Rechnungsnummer eintragen"},"confirmButton":{"text":"Ausführen"}},"captureAction":{"successTitle":"Erfolg","successMessage":"Die Autorisierung war erfolgreich.","maxAmount":"Maximalbetrag","currentAmount":"Betrag","isFinal":"Kein erneuter Einzug möglich","button":{"text":"Zahlung einziehen"}},"voidAction":{"successTitle":"Erfolg","successMessage":"Die Autorisierung wurde erfolgreich abgebrochen.","confirm":{"message":"Möchtest du diese Zahlung wirklich abbrechen?","button":{"confirm":"Autorisierung abbrechen","cancel":"Nein"}}}}}')},"3nUz":function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"PayPal settings"},"messageNotBlank":"This value should not be blank.","settingForm":{"save":"Save","testLive":"Test API credentials","testSandbox":"Test sandbox API credentials","credentials":{"cardTitle":"API credentials","clientId":{"label":"Client ID","tooltipText":"The REST API client ID is used to authenticate this plugin with the PayPal API."},"clientSecret":{"label":"Client secret","tooltipText":"The REST API client secret is used to authenticate this plugin with the PayPal API."},"clientIdSandbox":{"label":"Sandbox client ID","tooltipText":"The REST API client ID is used while testing to authenticate this plugin with the PayPal API."},"clientSecretSandbox":{"label":"Sandbox client secret","tooltipText":"The REST API client secret is used while testing to authenticate this plugin with the PayPal API."},"sandbox":{"label":"Enable sandbox","tooltipText":"Enable if you want to test the PayPal integration."},"button":{"title":"Get API credentials","titleSandbox":"Get sandbox API credentials","messageFetchedError":"Try again or enter your credentials manually.","titleFetchedError":"An error occurred"}},"behaviour":{"cardTitle":"Behaviour","merchantLocation":{"label":"Merchant location","germany":"Germany","other":"Other merchant location"},"intent":{"label":"Payment acquisition","sale":"Complete payment immediately (Sale)","authorize":"Delayed payment collection (Auth-Capture)","order":"Delayed payment collection (Order-Auth-Capture)"},"submitCart":{"label":"Submit cart","helpText":"If this option is active, cart data will be submitted to PayPal at checkout."},"brandName":{"label":"Your own brand name on PayPal page","tooltipText":"This text will be displayed as the brand name on the PayPal payment page."},"landingPage":{"label":"PayPal landing page","helpText":{"Login":"Login: The PayPal site displays a login screen as landing page.","Billing":"Registration: The PayPal site displays a registration form as landing page."},"options":{"Login":"Login","Billing":"Registration"}},"sendOrderNumber":{"label":"Submit order number","helpText":"If this option is active, the order number will be submitted to PayPal at checkout."},"orderNumberPrefix":{"label":"Order number prefix","tooltipText":"This text is placed before the original order number (e.g MyShop_SW20001). This helps to identify the shop where the payment was made."}},"express":{"cardTitle":"PayPal Express Checkout","ecsDetailEnabled":{"label":"\'Pay now\' on detail page:","helpText":"If this option is active, the Express Checkout button will be shown on each product detail page."},"ecsCartEnabled":{"label":"\'Pay now\' on cart:","helpText":"If this option is active, the Express Checkout button will be shown on the cart."},"ecsOffCanvasEnabled":{"label":"\'Pay Now\' on Off-Canvas cart:","helpText":"If this option is active, the Express Checkout button will be shown on the Off-Canvas cart."},"ecsLoginEnabled":{"label":"\'Pay Now\' on login page:","helpText":"If this option is active, the Express Checkout button will be shown on the login and register page."},"ecsListingEnabled":{"label":"\'Pay now\' on listing pages:","helpText":"If this option is active, the Express Checkout button will be shown on listing pages."},"ecsButtonColor":{"label":"Button color:","options":{"blue":"Blue","black":"Black","gold":"Gold","silver":"Silver"}},"ecsButtonShape":{"label":"Button shape:","options":{"pill":"Round","rect":"Rectangular"}},"ecsSubmitCart":{"label":"Submit cart","helpText":"If this option is active, the cart will be submitted to PayPal for Express orders."},"ecsButtonLanguageIso":{"label":"Button locale:","helpText":"If not set, the sales channel language will be used."}},"installment":{"cardTitle":"Ratenzahlung","installmentBannerEnabled":{"label":"Enable installment banner"}},"spb":{"cardTitle":"PayPal Checkout with Smart Payment Buttons","spbCheckoutEnabled":{"label":"Enable Smart Payment Buttons"},"spbButtonLanguageIso":{"label":"Button locale:","helpText":"If not set, the sales channel language will be used."},"spbAlternativePaymentMethodsEnabled":{"label":"Enable the alternative payment methods for the Smart Payment Buttons.","helpText":"Alternative payment methods are, Creditcards, Invoice and more."}},"plus":{"cardTitle":"PayPal PLUS","introduction":"<strong>PayPal PLUS:</strong> Your complete all-in-one payment solution including PayPal, Direct Debit, Credit Card and Pay Upon Invoice. PayPal PLUS offers your customers full flexibility in choosing their preferred payment method. Your advantages as a seller? Easier accounting with only one contracting party, one account and one transaction overview showing all incoming payments. You receive your money directly after customers complete the order process.<br>You can apply for PayPal PLUS <a href=\'https://www.paypal.com/de/webapps/mpp/paypal-plus\' target=\'_blank\'>here</a>. Apply for Payment upon Invoice <a href=\'https://www.paypal.com/de/webapps/mpp/pui-start\' target=\'_blank\'>here</a>.","plusCheckoutEnabled":{"label":"Enable PayPal PLUS"}},"titleSuccess":"Success","titleError":"Error","messageSaveSuccess":"The PayPal settings have been saved.","messageTestSuccess":"The API credentials have been validated.","messageTestError":"The API credentials could not be validated.","messageWebhookCreated":"The webhook has been registered.","messageWebhookUpdated":"The webhook has been updated.","messageWebhookError":"The webhook could not be saved. The following errors occurred:"}}}')},"5ooL":function(e,t,n){},"8RPk":function(e,t){e.exports="{% block sw_plugin_list_grid_columns_actions_settings %}\n    <template v-if=\"item.composerName === 'swag/paypal'\">\n        <sw-context-menu-item :routerLink=\"{ name: 'swag.paypal.index' }\">\n            {{ $tc('sw-plugin.list.config') }}\n        </sw-context-menu-item>\n    </template>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n"},"9jKl":function(e,t){const{Mixin:n}=Shopware,{debug:a}=Shopware.Utils;n.register("swag-paypal-credentials-loader",{inject:["SwagPayPalApiCredentialsService"],data:()=>({isGetCredentialsSuccessful:!1,nonceLive:`${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,nonceSandbox:`${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,payPalPartnerIdLive:"W8HDQ6LB42CJW",payPalPartnerClientIdLive:"AVTKpaE_t1zRCDfiJOP1ZYMAW0S_IvASFOIhhbeszRUFY0vsFIsGrt_FFsgHKU4VJiqub-tI30dpnANJ",payPalPartnerIdSandbox:"J425NKDMLL4YA",payPalPartnerClientIdSandbox:"AdRxw_8f4e2MOEduZB6D6ZOkdjnbR3SQJ1dQP3Y6GDLkxK0g4j0km2V2tRjoVDe0T2ZqQX6NlzpKsBwE",requestParams:{channelId:"partner",productIntentId:"addipmt",integrationType:"FO",features:["PAYMENT","REFUND","READ_SELLER_DISPUTE","UPDATE_SELLER_DISPUTE","ADVANCED_TRANSACTIONS_SEARCH"],displayMode:"minibrowser"}}),computed:{onboardingUrlLive(){return`https://www.paypal.com/US/merchantsignup/partner/onboardingentry?${this.createRequestParameter({partnerId:this.payPalPartnerIdLive,partnerClientId:this.payPalPartnerClientIdLive,returnToPartnerUrl:this.returnUrl(),sellerNonce:this.nonceLive}).toString()}`},onboardingUrlSandbox(){return`https://www.sandbox.paypal.com/US/merchantsignup/partner/onboardingentry?${this.createRequestParameter({partnerId:this.payPalPartnerIdSandbox,partnerClientId:this.payPalPartnerClientIdSandbox,returnToPartnerUrl:this.returnUrl(),sellerNonce:this.nonceSandbox}).toString()}`}},created(){this.$root.$on("paypal-onboarding-finish",this.getPayPalCredentials),window.onboardingCallbackLive=function(e,t){Shopware.Application.getApplicationRoot().$emit("paypal-onboarding-finish",{authCode:e,sharedId:t,sandbox:!1})},window.onboardingCallbackSandbox=function(e,t){Shopware.Application.getApplicationRoot().$emit("paypal-onboarding-finish",{authCode:e,sharedId:t,sandbox:!0})}},mounted(){this.createScript()},destroyed(){this.$root.$off("paypal-onboarding-finish")},methods:{returnUrl(){return`${window.location.origin}${window.location.pathname}#${this.$route.path}`},createRequestParameter(e={}){const t={...this.requestParams,...e};return Object.keys(t).reduce((e,n)=>{let a=t[n];return Array.isArray(a)&&(a=a.join(",")),e.append(n,a),e},new URLSearchParams)},createScript(){const e="paypal-js";if(document.getElementById(e))window.PAYPAL&&this.renderPayPalButton();else{const t="https://www.paypal.com/webapps/merchantboarding/js/lib/lightbox/partner.js",n=document.createElement("script");n.id=e,n.type="text/javascript",n.src=t,n.async=!0,n.addEventListener("load",this.renderPayPalButton.bind(this),!1),document.head.appendChild(n)}},renderPayPalButton(){window.PAYPAL.apps.Signup.render=function(){window.PAYPAL.apps.Signup.timeout&&clearTimeout(window.PAYPAL.apps.Signup.timeout),window.PAYPAL.apps.Signup.timeout=setTimeout(window.PAYPAL.apps.Signup.render,300)},window.PAYPAL.apps.Signup.render()},getPayPalCredentials({authCode:e,sharedId:t,sandbox:n}){return this.isLoading?Promise.resolve(!1):(this.isGetCredentialsSuccessful=null,this.isLoading=!0,this.SwagPayPalApiCredentialsService.getApiCredentials(e,t,n?this.nonceSandbox:this.nonceLive,n).then(e=>{this.isGetCredentialsSuccessful=!0,this.onPayPalCredentialsLoadSuccess(e.client_id,e.client_secret,n)}).catch(()=>{this.isGetCredentialsSuccessful=!1,this.onPayPalCredentialsLoadFailed(n)}).finally(()=>{this.isLoading=!1}))},onPayPalCredentialsLoadSuccess(){a.warn("swag-paypal-credentials-loader Mixin",'When using the paypal-credentials-loader mixin you have to implement your custom "onPayPalCredentialsLoadSuccess()" method.')},onPayPalCredentialsLoadFailed(){a.warn("swag-paypal-credentials-loader Mixin",'When using the paypal-credentials-loader mixin you have to implement your custom "onPayPalCredentialsLoadFailed()" method.')}}})},Hb81:function(e,t,n){var a=n("xT8d");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("121d8b08",a,!0,{})},I6iY:function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"Einstellungen für PayPal"},"messageNotBlank":"Dieser Wert darf nicht leer sein.","settingForm":{"save":"Speichern","testLive":"API-Zugangsdaten testen","testSandbox":"Sandbox-API-Zugangsdaten testen","credentials":{"cardTitle":"API-Zugangsdaten","clientId":{"label":"Client-ID","tooltipText":"Die Client-ID der REST-API, die das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientSecret":{"label":"Client-Secret","tooltipText":"Das Client-Secret der REST-API, das das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientIdSandbox":{"label":"Sandbox-Client-ID","tooltipText":"Die Client-ID der REST-API, die das Plugin im Testfall dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientSecretSandbox":{"label":"Sandbox-Client-Secret","tooltipText":"Das Client-Secret der REST-API, das das Plugin im Testfall dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"sandbox":{"label":"Sandbox aktivieren","tooltipText":"Aktiviere diese Option, um die Integration zu testen."},"button":{"title":"Hole API Zugangsdaten","titleSandbox":"Hole Sandbox API Zugangsdaten","messageFetchedError":" Bitte versuche es erneut oder gebe die Zugangsdaten manuell ein.","titleFetchedError":"Es ist ein Fehler aufgetreten"}},"behaviour":{"cardTitle":"Verhalten","merchantLocation":{"label":"Händlerstandort","germany":"Deutschland","other":"Anderer Händlerstandort"},"intent":{"label":"Zahlungsabschluss","sale":"Zahlung sofort abschließen (Sale)","authorize":"Zeitverzögerter Zahlungseinzug (Auth-Capture)","order":"Zeitverzögerter Zahlungseinzug (Order-Auth-Capture)"},"submitCart":{"label":"Warenkorb übertragen","helpText":"Wenn diese Option aktiv ist, werden beim Checkout die Warenkorbdaten an PayPal übertragen."},"brandName":{"label":"Eigener Markenname auf der PayPal-Seite","tooltipText":"Dieser Text wird als Markenname auf der PayPal-Zahlungsseite angezeigt."},"landingPage":{"label":"PayPal-Landingpage","helpText":{"Login":"Anmeldung: Auf der PayPal-Seite wird der Login als Landingpage angezeigt.","Billing":"Registrierung: Auf der PayPal-Seite wird die Registrierung als Landingpage angezeigt."},"options":{"Login":"Anmeldung","Billing":"Registrierung"}},"sendOrderNumber":{"label":"Bestellnummer übertragen","helpText":"Wenn diese Option aktiv ist, wird beim Checkout die Bestellnummer an PayPal übertragen."},"orderNumberPrefix":{"label":"Bestellnummer-Präfix","tooltipText":"Dieser Text wird vor die ursprüngliche Bestellnummer gehängt (z.B. MeinShop_SW20001). Das hilft dabei der Identifizierung des Shops, in dem die Zahlung ausgeführt wurde."}},"express":{"cardTitle":"PayPal Express Checkout","ecsDetailEnabled":{"label":"\'Direkt zu PayPal\' auf Detailseite:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf jeder Produktdetailseite angezeigt."},"ecsCartEnabled":{"label":"\'Direkt zu PayPal\' im Warenkorb:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf der Warenkorbseite angezeigt."},"ecsOffCanvasEnabled":{"label":"\'Direkt zu PayPal\' im Off-Canvas Warenkorb:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button in dem Off-Canvas-Warenkorb angezeigt."},"ecsLoginEnabled":{"label":"\'Direkt zu PayPal\' auf Loginseite:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf der Login- und Registrierungsseite angezeigt."},"ecsListingEnabled":{"label":"\'Direkt zu PayPal\' auf Listing Seiten:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf Listing-Seiten angezeigt."},"ecsButtonColor":{"label":"Buttonfarbe:","options":{"blue":"Blau","black":"Schwarz","gold":"Gold","silver":"Silber"}},"ecsButtonShape":{"label":"Buttonform:","options":{"pill":"Rund","rect":"Eckig"}},"ecsSubmitCart":{"label":"Warenkorb übertragen:","helpText":"Wenn diese Option aktiv ist, wird der Warenkorb bei Express-Bestellungen an PayPal übertragen."},"ecsButtonLanguageIso":{"label":"Buttonsprache:","helpText":"Wenn nicht gesetzt, wird die Sprache des Verkaufskanals verwendet."}},"installment":{"cardTitle":"Ratenzahlung","installmentBannerEnabled":{"label":"Ratenzahlung Banner aktivieren"}},"spb":{"cardTitle":"PayPal Checkout mit Smart Payment Buttons","spbCheckoutEnabled":{"label":"Smart Payment Buttons aktivieren"},"spbButtonLanguageIso":{"label":"Buttonsprache:","helpText":"Wenn nicht gesetzt, wird die Sprache des Verkaufskanals verwendet."},"spbAlternativePaymentMethodsEnabled":{"label":"Aktiviert die alternativen Zahlungsarten der Smart Payment Buttons.","helpText":"Die alternativen Zahlungsarten sind, Kreditkarten, SEPA und mehr."}},"plus":{"cardTitle":"PayPal PLUS","introduction":"<strong>Die Komplettlösung mit PayPal, Lastschrift, Kreditkarte und Kauf auf Rechnung.</strong> PayPal PLUS bietet deinen Kunden durch die Vielzahl der Zahlarten mehr Zahlungsflexibilität. Deine Vorteile als Händler: Die vereinfachte Buchhaltung mit nur einem Vertragspartner, einem Konto und einer Transaktionsübersicht für alle Zahlungseingänge. Dein Geld erhältst du direkt nach Kaufabschluss.<br>Bitte PayPal PLUS <a href=\'https://www.paypal.com/de/webapps/mpp/paypal-plus\' target=\'_blank\'>hier</a> beantragen. Den Rechnungskauf kannst du <a href=\'https://www.paypal.com/de/webapps/mpp/pui-start\' target=\'_blank\'>hier</a> beantragen.","plusCheckoutEnabled":{"label":"PayPal PLUS aktivieren"}},"titleSuccess":"Erfolg","titleError":"Fehler","messageSaveSuccess":"Die PayPal-Einstellungen wurden gespeichert.","messageTestSuccess":"Die API-Zugangsdaten wurden validiert.","messageTestError":"Die API-Zugangsdaten konnten nicht validiert werden.","messageWebhookCreated":"Der Webhook wurde registriert.","messageWebhookUpdated":"Der Webhook wurde aktualisiert.","messageWebhookError":"Der Webhook konnte nicht gespeichert werden. Folgende Fehler sind aufgetreten:"}}}')},Ivxe:function(e,t){e.exports='{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item v-if="isPayPalPayment"\n                  :route="{ name: \'swag.paypal.payment.detail\', params: { id: $route.params.id } }"\n                  :title="$tc(\'swag-paypal.header\')">\n        {{ $tc(\'swag-paypal.header\') }}\n    </sw-tabs-item>\n{% endblock %}\n\n\n{% block sw_order_detail_actions %}\n    <template v-if="isEditable">\n        {% parent %}\n    </template>\n{% endblock %}\n'},NFFz:function(e,t){e.exports='{% block swag_paypal_payment_actions %}\n    <div>\n        <div class="swag-paypal-payment-actions__button-container">\n            <div class="swag-paypal-payment-actions__authorize-button-group">\n\n                {% block swag_paypal_payment_actions_void %}\n                    <sw-button v-if="showVoidButton"\n                               size="small"\n                               @click="spawnModal(\'void\')">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.void\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_capture %}\n                    <sw-button v-if="captureableAmount > 0"\n                               size="small"\n                               @click="spawnModal(\'capture\')">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.capture\') }}\n                    </sw-button>\n                {% endblock %}\n            </div>\n\n            {% block swag_paypal_payment_actions_refund %}\n                <sw-button variant="primary"\n                           size="small"\n                           :disabled="refundableAmount <= 0"\n                           @click="spawnModal(\'refund\')">\n                    {{ $tc(\'swag-paypal-payment.buttons.label.refund\') }}\n                </sw-button>\n            {% endblock %}\n\n        </div>\n\n        {% block swag_paypal_payment_actions_modal %}\n                {% block swag_paypal_payment_actions_modal_capture %}\n                    <swag-paypal-payment-action-capture v-if="modalType === \'capture\'"\n                                                        :orderId="orderId"\n                                                        :paymentResource="paymentResource"\n                                                        :maxCaptureValue="captureableAmount"\n                                                        @modal-close="closeModal">\n                    </swag-paypal-payment-action-capture>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_refund %}\n                    <swag-paypal-payment-action-refund v-if="modalType === \'refund\'"\n                                                       :orderId="orderId"\n                                                       :paymentResource="paymentResource"\n                                                       @modal-close="closeModal">\n                    </swag-paypal-payment-action-refund>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_void %}\n                    <swag-paypal-payment-action-void v-if="modalType === \'void\'"\n                                                     :orderId="orderId"\n                                                     :paymentResource="paymentResource"\n                                                     @modal-close="closeModal">\n                    </swag-paypal-payment-action-void>\n                {% endblock %}\n        {% endblock %}\n    </div>\n{% endblock %}\n'},Qpcm:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_credentials %}\n    <sw-card class="sw-card--grid"\n             :title="$tc(\'swag-paypal.settingForm.credentials.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_credentials_card_container %}\n            <sw-container>\n\n                {% block swag_paypal_content_card_channel_config_credentials_card_container_settings %}\n                    <div v-if="actualConfigData" class="swag-paypal-settings-credentials-fields">\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientId\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientId\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientId"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientId.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientId.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientSecret\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecret\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecret"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecret.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecret.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_get_credentials %}\n                            <a class="sw-button"\n                               target="_blank"\n                               :href="`${onboardingUrlLive}`"\n                               data-paypal-onboard-complete="onboardingCallbackLive"\n                               data-paypal-button="true">\n                                {{ $tc(\'swag-paypal.settingForm.credentials.button.title\') }}\n                            </a>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test %}\n                            <sw-button-process v-model="isTestLiveSuccessful"\n                                               :isLoading="isTestingLive"\n                                               :disabled="testLiveButtonDisabled"\n                                               @click="onTest(false)">\n                                {{ $tc(\'swag-paypal.settingForm.testLive\') }}\n                            </sw-button-process>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.sandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sandbox\']"\n                                                :customInheritationCheckFunction="checkBoolFieldInheritance">\n                                <template #content="props">\n                                    <sw-switch-field name="SwagPayPal.settings.sandbox"\n                                                     :mapInheritance="props"\n                                                     :label="$tc(\'swag-paypal.settingForm.credentials.sandbox.label\')"\n                                                     :helpText="$tc(\'swag-paypal.settingForm.credentials.sandbox.tooltipText\')"\n                                                     :disabled="props.isInherited"\n                                                     :value="props.currentValue"\n                                                     @change="props.updateCurrentValue">\n                                    </sw-switch-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientIdSandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientIdSandbox\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientIdSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdSandboxErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientSecretSandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecretSandbox\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecretSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretSandboxErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_get_credentials_sandbox %}\n                            <a class="sw-button"\n                               target="_blank"\n                               :href="`${onboardingUrlSandbox}`"\n                               data-paypal-onboard-complete="onboardingCallbackSandbox"\n                               data-paypal-button="true">\n                                {{ $tc(\'swag-paypal.settingForm.credentials.button.titleSandbox\') }}\n                            </a>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test_sandbox %}\n                            <sw-button-process v-model="isTestSandboxSuccessful"\n                                               :isLoading="isTestingSandbox"\n                                               :disabled="testSandboxButtonDisabled"\n                                               @click="onTest(true)">\n                                {{ $tc(\'swag-paypal.settingForm.testSandbox\') }}\n                            </sw-button-process>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},RyCx:function(e,t,n){var a=n("5ooL");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("da4f006e",a,!0,{})},W4Ye:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_plus %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.plus.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_plus_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-plus-fields">\n\n                {% block swag_paypal_content_card_channel_config_plus_settings_onboarding %}\n                    <p v-html="$tc(\'swag-paypal.settingForm.plus.introduction\')"></p>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_plus_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.plusCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.plus.plusCheckoutEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},WW0I:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_express %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.express.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_express_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-express-fields">\n\n                {% block swag_paypal_content_card_channel_config_express_settings_detail_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsDetailEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_cart_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsCartEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_off_canvas_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsOffCanvasEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n\n                {% block swag_paypal_content_card_channel_config_express_settings_login_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsLoginEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_listing_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsListingEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_submit_cart %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsSubmitCart\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsSubmitCart\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsSubmitCart"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsSubmitCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsSubmitCart.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_locale %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.ecsButtonLanguageIso"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.helpText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},XobP:function(e,t){e.exports='{% block sw_settings_content_card_slot_plugins %}\n    {% parent %}\n\n    <sw-settings-item :label="$tc(\'swag-paypal.general.mainMenuItemGeneral\')"\n                      :to="{ name: \'swag.paypal.index\' }"\n                      :backgroundEnabled="false">\n        <template #icon>\n            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 48 48" class="sw-settings-index__paypal-icon">\n                <g fill="none" fill-rule="evenodd">\n                    <path fill="#013088" d="M1.36196923,45.9634625 C0.525969231,45.9634625 -0.113723077,45.2159 0.0165846154,44.3907125 L6.62843077,2.599775 C6.80104615,1.4978375 7.75381538,0.6878375 8.87073846,0.6878375 L24.7445846,0.6878375 C30.2124308,0.6878375 34.4855077,1.8387125 36.8530462,4.5269 C39.0005846,6.9687125 39.6284308,9.6653375 39.0056615,13.6259 C39.8924308,14.0946875 40.6522769,14.670125 41.2648923,15.3636875 C43.2888923,17.66375 43.6848923,20.934125 42.9199692,24.8508125 C41.0888923,34.2265625 34.8239692,37.4665625 26.8210462,37.4665625 L25.5856615,37.4665625 C24.6075077,37.4665625 23.7748923,38.1753125 23.6225846,39.1405625 L23.5227385,39.6805625 L21.9675077,49.5220625 L21.8862769,49.9405625 C21.7322769,50.9024375 20.9013538,51.6111875 19.9232,51.6111875 L11.6630462,51.6111875 C10.9319692,51.6111875 10.3735077,50.9598125 10.4868923,50.2375625 L11.1620698,45.9634625 L1.36196923,45.9634625 Z"/>\n                    <path fill="#019CDE" d="M39.0039692,13.6255625 C38.9565846,13.927625 38.9024308,14.2364375 38.8415077,14.5536875 C36.7481231,25.271 29.5862769,28.973375 20.4393538,28.973375 L15.7821231,28.973375 C14.6635077,28.973375 13.7208923,29.783375 13.5465846,30.883625 L11.1621231,45.963125 L10.4868923,50.2375625 C10.3735077,50.9598125 10.9319692,51.6111875 11.6630462,51.6111875 L19.9232,51.6111875 C20.9013538,51.6111875 21.7322769,50.9024375 21.8862769,49.9405625 L21.9675077,49.5220625 L23.5227385,39.6805625 L23.6225846,39.1405625 C23.7748923,38.1753125 24.6075077,37.4665625 25.5856615,37.4665625 L26.8210462,37.4665625 C34.8239692,37.4665625 41.0888923,34.2265625 42.9199692,24.8508125 C43.6848923,20.934125 43.2888923,17.66375 41.2648923,15.3636875 C40.6522769,14.670125 39.8924308,14.0946875 39.0039692,13.6255625"/>\n                    <path fill="#012269" d="M36.8142923,12.7546437 C36.4944462,12.6618312 36.1644462,12.5774562 35.8259846,12.5015187 C35.4858308,12.4272687 35.1372154,12.3614562 34.7784462,12.3040812 C33.5227538,12.1015812 32.1469077,12.0053937 30.6729077,12.0053937 L18.2310615,12.0053937 C17.9247538,12.0053937 17.6336769,12.0745812 17.3730615,12.1994562 C16.7993692,12.4745187 16.3729077,13.0162062 16.2696769,13.6793937 L13.6229077,30.3957687 L13.5467538,30.8834562 C13.7210615,29.7832062 14.6636769,28.9732062 15.7822923,28.9732062 L20.4395231,28.9732062 C29.5864462,28.9732062 36.7482923,25.2691437 38.8416769,14.5535187 C38.9042923,14.2362687 38.9567538,13.9274562 39.0041385,13.6253937 C38.4744462,13.3452687 37.9007538,13.1056437 37.2830615,12.9014562 C37.1307538,12.8508312 36.9733692,12.8018937 36.8142923,12.7546437"/>\n                </g>\n            </svg>\n        </template>\n    </sw-settings-item>\n{% endblock %}\n'},agWB:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_spb %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.spb.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_spb_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-spb-fields">\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbCheckoutEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_locale %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.spbButtonLanguageIso"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.helpText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_alternaitve_payment_methods_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbAlternativePaymentMethodsEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},amGt:function(e,t){e.exports='{% block swag_paypal_payment_detail %}\n    <div class="swag-paypal-payment-detail">\n        <div v-if="!isLoading">\n            <sw-card :title="$tc(\'swag-paypal-payment.paymentDetails.cardTitle\')">\n                <template #grid>\n\n                    {% block swag_paypal_payment_actions_section %}\n                        <sw-card-section secondary\n                                         slim>\n                            <swag-paypal-payment-actions :orderId="order.id" :paymentResource="paymentResource">\n                            </swag-paypal-payment-actions>\n                        </sw-card-section>\n                    {% endblock %}\n\n                    <sw-card-section divider="top">\n                        <sw-container columns="1fr"\n                                      gap="0px 30px">\n\n                            {% block swag_paypal_payment_detail_invoice %}\n                                {% block swag_paypal_payment_detail_invoice_heading %}\n                                    <h3>\n                                        {{ $tc(\'swag-paypal-payment.paymentDetails.invoice.heading\') }}\n                                    </h3>\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_invoice_list %}\n                                    <sw-description-list class="swag-paypal-payment-detail__data">\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.totalAmount\') }}</dt>\n                                        <dd>{{ amount.total }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.subTotal\') }}</dt>\n                                        <dd> {{ amount.details.subtotal }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.shipping\') }}</dt>\n                                        <dd> {{ amount.details.shipping }} {{ currency }}</dd>\n                                    </sw-description-list>\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_payment %}\n                                    {% block swag_paypal_payment_detail_payment_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.payment.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_payment_detail_payment_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.intent\') }}</dt>\n                                            <dd>{{ $tc(`swag-paypal.settingForm.behaviour.intent.${paymentResource.intent}`) }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.paymentId\') }}</dt>\n                                            <dd>{{ paymentResource.id }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.cartId\') }}</dt>\n                                            <dd>{{ paymentResource.cart }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.state\') }}</dt>\n                                            <dd>{{ paymentResource.state }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.createTime\') }}</dt>\n                                            <dd>{{ createDateTime }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.updateTime\') }}</dt>\n                                            <dd>{{ updateDateTime }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_customer %}\n                                    {% block swag_paypal_payment_detail_customer_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.customer.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_payment_detail_customer_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.customer.payerId\') }}</dt>\n                                            <dd>{{ paymentResource.payer.payer_info.payer_id }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card-section>\n                </template>\n            </sw-card>\n\n            {% block swag_paypal_payment_transaction_history_card %}\n                <sw-card :title="$tc(\'swag-paypal-payment.transactionHistory.cardTitle\')">\n                    <template #grid>\n\n                        {% block swag_paypal_payment_transaction_history_grid %}\n                            <sw-data-grid :dataSource="relatedResources"\n                                          :columns="relatedResourceColumns"\n                                          :showActions="false"\n                                          :showSelection="false">\n                            </sw-data-grid>\n                        {% endblock %}\n                    </template>\n                </sw-card>\n            {% endblock %}\n\n        </div>\n        <sw-loader v-if="isLoading"></sw-loader>\n    </div>\n{% endblock %}\n'},bdLW:function(e,t){e.exports='{% block sw_first_run_wizard_paypal_credentials %}\n    <div class="sw-first-run-wizard-paypal-credentials">\n\n        {% block sw_first_run_wizard_paypal_credentials_inner %}\n            <sw-loader v-if="isLoading"></sw-loader>\n\n            {% block sw_first_run_wizard_paypal_credentials_intro %}\n                <p class="sw-first-run-wizard-paypal-credentials__headerText">\n                    {{ $tc(\'swag-paypal-frw-credentials.textIntroPayPal\') }}\n                </p>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_sandbox %}\n                <sw-switch-field v-model="config[\'SwagPayPal.settings.sandbox\']"\n                                 :label="$tc(\'swag-paypal-frw-credentials.labelSandbox\')"\n                                 :helpText="$tc(\'swag-paypal-frw-credentials.tooltipSandbox\')">\n                </sw-switch-field>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_button_container %}\n                <div class="sw-first-run-wizard-paypal-credentials__button-container">\n\n                    {% block sw_first_run_wizard_paypal_credentials_button %}\n                        <a class="sw-button sw-button--primary swag-paypal-frw__signup-button"\n                           target="_blank"\n                           :data-paypal-onboard-complete="onboardingCallback"\n                           :href="`${onboardingUrl}`"\n                           data-paypal-button="true">\n                            {{ $tc(\'swag-paypal-frw-credentials.buttonGetCredentials\') }}\n                        </a>\n                    {% endblock %}\n\n                    {% block sw_first_run_wizard_paypal_credentials_indicator %}\n                        <div class="sw-first-run-wizard-paypal-credentials__indicator">\n                            <template v-if="isGetCredentialsSuccessful">\n\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_icon %}\n                                    <sw-icon name="small-default-checkmark-line-medium"\n                                             class="sw-first-run-wizard-paypal-credentials__icon-successful">\n                                    </sw-icon>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_text %}\n                                    <span class="sw-first-run-wizard-paypal-credentials__text-indicator">\n                                        {{ $tc(\'swag-paypal-frw-credentials.textFetchedSuccessful\') }}\n                                    </span>\n                                {% endblock %}\n                            </template>\n                        </div>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_collapse %}\n                <sw-collapse>\n\n                    {% block sw_first_run_wizard_paypal_credentials_collapse_header %}\n                        <template #header="{ expanded }">\n                            <div class="sw-first-run-wizard-paypal-credentials__collapse-header">\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_text %}\n                                    <span class="sw-first-run-wizard-paypal-credentials__collapse-header-title">\n                                        {{ $tc(\'swag-paypal-frw-credentials.textSettingsHeader\') }}\n                                    </span>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_button_expanded %}\n                                    <sw-icon v-if="expanded"\n                                             key="filter-collapse-expanded-indicator"\n                                             class="sw-first-run-wizard-paypal-credentials__collapse-button"\n                                             name="small-arrow-small-down">\n                                    </sw-icon>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_button_not_expanded %}\n                                    <sw-icon v-else\n                                             key="filter-collapse-expanded-indicator"\n                                             class="sw-first-run-wizard-paypal-credentials__collapse-button"\n                                             name="small-arrow-small-right">\n                                    </sw-icon>\n                                {% endblock %}\n                            </div>\n                        </template>\n                    {% endblock %}\n\n                    {% block sw_first_run_wizard_paypal_credentials_collapse_content %}\n                        <template #content>\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientId %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientId\']"\n                                               v-show="!config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientId\')"\n                                               @input="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientSecret %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientSecret\']"\n                                               v-show="!config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientSecret\')"\n                                               @input="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientIdSandbox %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientIdSandbox\']"\n                                               v-show="config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientIdSandbox\')"\n                                               @input="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientSecretSandbox %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientSecretSandbox\']"\n                                               v-show="config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientSecretSandbox\')"\n                                               @input="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-collapse>\n            {% endblock %}\n        {% endblock %}\n    </div>\n{% endblock %}\n'},cCEk:function(e,t){e.exports='{% block swag_paypal_paymemnt_action_void %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.void`)"\n              @modal-close="closeModal">\n\n        {% block swag_paypal_paymemnt_action_void_headline %}\n            <p>{{ $tc(\'swag-paypal-payment.voidAction.confirm.message\') }}</p>\n        {% endblock %}\n\n        <template #modal-footer>\n\n            {% block swag_paypal_paymemnt_action_void_cancel_button %}\n                <sw-button @click="closeModal">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.cancel\') }}\n                </sw-button>\n            {% endblock %}\n\n            {% block swag_paypal_paymemnt_action_void_confirm_button %}\n                <sw-button variant="primary"\n                           @click="voidPayment">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.confirm\') }}\n                </sw-button>\n            {% endblock %}\n\n        </template>\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},du1X:function(e,t){e.exports='{% block swag_paypal_payment_action_capture %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.capture`)"\n              @modal-close="$emit(\'modal-close\')">\n\n        {% block swag_paypal_payment_action_capture_max_amount %}\n            <sw-text-field :label="$tc(\'swag-paypal-payment.captureAction.maxAmount\')"\n                           :disabled="true"\n                           v-model="maxCaptureValue">\n            </sw-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_value %}\n            <sw-number-field v-model="captureValue"\n                             :max="maxCaptureValue"\n                             :min="0"\n                             :label="$tc(\'swag-paypal-payment.captureAction.currentAmount\')"\n                             :suffix="currency">\n            </sw-number-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_is_final_capture %}\n            <sw-checkbox-field :label="$tc(\'swag-paypal-payment.captureAction.isFinal\')"\n                               v-model="isFinalCapture">\n            </sw-checkbox-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_submit_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="capture">\n                    {{ $tc(\'swag-paypal-payment.captureAction.button.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},fezf:function(e,t,n){var a=n("xFgS");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("4670bc3c",a,!0,{})},ipas:function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Hole API Zugangsdaten","textIntroPayPal":"Um PayPal zu nutzen müssen nur die API Zugangsdaten eingegeben werden.","labelClientId":"Client-ID","labelClientSecret":"Client-Secret","labelClientIdSandbox":"Sandbox-Client-ID","labelClientSecretSandbox":"Sandbox-Client-Secret","labelSandbox":"Sandbox","tooltipSandbox":"Je nach Aktivierung der Sandbox werden unterschiedliche Zugangsdaten hinterlegt.","textSettingsHeader":"Erweiterte Einstellungen","messageFetchedError":" Bitte versuche es erneut oder nutze die erweiterten Einstellungen um die Zugangsdaten direkt einzugeben.","titleFetchedError":"Es ist ein Fehler aufgetreten","textFetchedSuccessful":"Die Zugangsdaten wurden erfolgreich abgerufen.","titleNoCredentials":"Fehler","messageNoCredentials":"Es wurden keine Zugangsdaten hinterlegt.","titleTestSuccess":"Erfolgreich","messageTestSuccess":"Die Zugangsdaten sind gültig.","titleTestError":"Fehler"}}')},jIlG:function(e,t){e.exports='{% block swag_paypal %}\n    <sw-page class="swag-paypal">\n\n        {% block swag_paypal_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                    {{ $tc(\'swag-paypal.header\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_actions %}\n            <template #smart-bar-actions>\n\n                {% block swag_paypal_actions_test %}\n                    {# @deprecated tag:v2.0.0 will be removed without replacement #}\n                {% endblock %}\n\n                {% block swag_paypal_actions_save %}\n                    <sw-button-process v-model="isSaveSuccessful"\n                                       class="sw-settings-login-registration__save-action"\n                                       variant="primary"\n                                       :isLoading="isLoading"\n                                       :disabled="isLoading"\n                                       @click="onSave">\n                        {{ $tc(\'swag-paypal.settingForm.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_content %}\n            <template #content>\n\n                {% block swag_paypal_content_card %}\n                    <sw-card-view>\n\n                        {% block swag_paypal_content_card_channel_config %}\n                            <sw-sales-channel-config v-model="config"\n                                                     ref="configComponent"\n                                                     domain="SwagPayPal.settings">\n\n                                {% block swag_paypal_content_card_channel_config_sales_channel %}\n                                    <template #select="{ onInput, selectedSalesChannelId, salesChannel }">\n\n                                        {% block swag_paypal_content_card_channel_config_sales_channel_card %}\n                                            <sw-card title="Sales Channel Switch">\n\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_title %}\n                                                    <sw-single-select v-model="selectedSalesChannelId"\n                                                                      labelProperty="translated.name"\n                                                                      valueProperty="id"\n                                                                      :options="salesChannel"\n                                                                      @input="onInput">\n                                                    </sw-single-select>\n                                                {% endblock %}\n                                            </sw-card>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block swag_paypal_content_card_channel_config_cards %}\n                                    <template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }">\n                                        <div v-if="actualConfigData">\n\n                                            {% block swag_paypal_content_card_channel_config_credentials_card %}\n                                                <sw-paypal-credentials :actualConfigData="actualConfigData"\n                                                                       :allConfigs="allConfigs"\n                                                                       :selectedSalesChannelId="selectedSalesChannelId"\n                                                                       :clientIdErrorState="clientIdErrorState"\n                                                                       :clientSecretErrorState="clientSecretErrorState"\n                                                                       :clientIdSandboxErrorState="clientIdSandboxErrorState"\n                                                                       :clientSecretSandboxErrorState="clientSecretSandboxErrorState"\n                                                                       :clientIdFilled="clientIdFilled"\n                                                                       :clientSecretFilled="clientSecretFilled"\n                                                                       :clientIdSandboxFilled="clientIdSandboxFilled"\n                                                                       :clientSecretSandboxFilled="clientSecretSandboxFilled"\n                                                                       :isLoading="isLoading">\n                                                </sw-paypal-credentials>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_behaviour %}\n                                                <sw-paypal-behaviour :actualConfigData="actualConfigData"\n                                                                     :allConfigs="allConfigs"\n                                                                     :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-behaviour>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_express %}\n                                                <sw-paypal-express :actualConfigData="actualConfigData"\n                                                                   :allConfigs="allConfigs"\n                                                                   :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-express>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_installment %}\n                                                <sw-paypal-installment :actualConfigData="actualConfigData"\n                                                                       :allConfigs="allConfigs"\n                                                                       :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-installment>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_spb %}\n                                                <sw-paypal-spb v-if="showSPBCard"\n                                                               :actualConfigData="actualConfigData"\n                                                               :allConfigs="allConfigs"\n                                                               :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-spb>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_plus %}\n                                                <sw-paypal-plus v-if="showPlusCard"\n                                                                :actualConfigData="actualConfigData"\n                                                                :allConfigs="allConfigs"\n                                                                :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-plus>\n                                            {% endblock %}\n                                        </div>\n                                    </template>\n                                {% endblock %}\n                            </sw-sales-channel-config>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_loading %}\n                            <sw-loader v-if="isLoading"></sw-loader>\n                        {% endblock %}\n                    </sw-card-view>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},jwJ0:function(e,t){e.exports='{% block swag_paypal_payment_action_refund %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.refund`)"\n              @modal-close="$emit(\'modal-close\')">\n\n        {% block swag_paypal_payment_action_refund_invoice_select %}\n            <sw-select-field :label="$tc(\'swag-paypal-payment.refundAction.invoiceSelect.label\')"\n                             v-model="selectedCaptureId"\n                             @change="preserveCapture">\n                <option v-for="capture in captures"\n                        :value="capture.id">\n                    {{ capture.label }}\n                </option>\n            </sw-select-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_invoice_number %}\n            <sw-text-field v-model="refundInvoiceNumber"\n                           :label="$tc(\'swag-paypal-payment.refundAction.refundInvoiceNumber.label\')"\n                           :placeholder="$tc(\'swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder\')">\n            </sw-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_reason %}\n            <sw-text-field v-model="refundReason"\n                           :label="$tc(\'swag-paypal-payment.refundAction.refundReason.label\')"\n                           :placeholder="$tc(\'swag-paypal-payment.refundAction.refundReason.placeholder\')">\n            </sw-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_amount %}\n            <sw-number-field v-model="refundAmount"\n                             :max="refundableAmount"\n                             :min="0"\n                             :label="$tc(\'swag-paypal-payment.refundAction.refundAmount.label\')"\n                             :suffix="selectedCapture.currency">\n            </sw-number-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_description %}\n            <sw-textarea-field\n                v-model="refundDescription"\n                :placeholder="$tc(\'swag-paypal-payment.refundAction.refundDescription.placeholder\')"\n                :label="$tc(\'swag-paypal-payment.refundAction.refundDescription.label\')">\n            </sw-textarea-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_confirm_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="refund">\n                    {{ $tc(\'swag-paypal-payment.refundAction.confirmButton.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},lpkt:function(e,t,n){var a=n("23zC");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("1986a830",a,!0,{})},myYF:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_installment %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.installment.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_installment_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-installment-fields">\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.installmentBannerEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},sBE9:function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Get API credentials","textIntroPayPal":"To get PayPal up and running you only need to provide your PayPal API credentials.","labelClientId":"Client ID","labelClientSecret":"Client secret","labelClientIdSandbox":"Sandbox client ID","labelClientSecretSandbox":"Sandbox client secret","labelSandbox":"Sandbox","tooltipSandbox":"Depending on activation of the sandbox, separate credentials are saved.","textSettingsHeader":"Advanced settings","messageFetchedError":"Try again or use the advanced settings to provide your credentials.","titleFetchedError":"An error occurred","textFetchedSuccessful":"Credentials have been fetched.","titleNoCredentials":"Error","messageNoCredentials":"No credentials provided.","titleTestSuccess":"Success","messageTestSuccess":"Credentials are valid.","titleTestError":"An error occurred"}}')},w9bD:function(e,t){e.exports='{% block swag_paypal_content_card_channel_config_behaviour %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.behaviour.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_behaviour_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-behaviour-field">\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_merchant_location %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.merchantLocation\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.merchantLocation\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.merchantLocation.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.merchantLocation"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="merchantLocationOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_intent %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.intent\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.intent\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.intent.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.intent"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="intentOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_submit_cart %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.submitCart\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.submitCart\']"\n                                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.submitCart"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behaviour.submitCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behaviour.submitCart.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_bran_name %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.brandName\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.brandName\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.brandName"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.behaviour.brandName.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.behaviour.brandName.tooltipText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_landing_page %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.landingPage\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.landingPage\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.landingPage.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.landingPage"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="landingPageOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @input="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_send_order_number %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.sendOrderNumber\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sendOrderNumber\']"\n                                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.sendOrderNumber"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behaviour.sendOrderNumber.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behaviour.sendOrderNumber.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_order_number_prefix %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.orderNumberPrefix\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.orderNumberPrefix\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.orderNumberPrefix"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.behaviour.orderNumberPrefix.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.behaviour.orderNumberPrefix.tooltipText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},xFgS:function(e,t,n){},xT8d:function(e,t,n){}},[["/SYc","runtime","vendors-node"]]]);